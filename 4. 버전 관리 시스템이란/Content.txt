# 버전 관리 시스템이란?

1. 예시) 나는 개발자입니다. file1.txt 작업을 완료했습니다.
2. 팀장에게 메일로 전송했습니다.
3. 팀장: file1.txt를 이렇게 변경해서 다시 줄래요?
4. 나: 알겠습니다.
5. 변경된 file1.txt를 메일로 다시 전송했습니다.
6. 팀장: 아, 생각해보니 별로네요. 다시 원래대로 돌려주세요.
7. 나: 이전에 메일을 보내셨나요?
8. 팀장: 지웠어요~
9. 나: (으음....)
10. 다시 수정해서 해결했습니다.
11. 팀장: 근데 아까보다 더 나아보이는데요?
12. 나: 어이쿠....
13. 이러한 행동을 생각해보면 이해가 갑니다.
14. file1.txt의 변화를 저장해야 합니다.
15. 다시 업그레이드 요청이 오면 file1_v2, v3와 같이 계속해서 업그레이드하여 전송합니다.
16. 그러나 계속하다 보면 100개 이상이 됩니다.
17. file3번이 20과 연결되어 문제가 발생했습니다.
18. 시간이 지나서 전체를 업데이트해야 하는 문제가 생겼습니다. (전체 복사) 이렇게 하면 용량이 커지고 문제가 생기며 시간이 오래 걸립니다.
19. 만약 바이러스에 감염되면 답이 없어집니다.
20. 그래서 고전적으로 VCS가 등장했습니다 - 버전 관리 시스템
21. file1.txt - v1(원본), v2(수정), v3(수정)과 같이 부분적으로 변경합니다 (데이터베이스)
22. 단점: 바이러스 X, 협업 X
23. CVCS(중앙 집중형 버전 관리 시스템): A와 B를 관리하는 별도의 컴퓨터를 만들었습니다.
24. 단점: B가 A를 덮어쓰면 문제가 발생합니다.
25. B가 A를 덮어쓴 것을 모르고 다시 사용하면 문제가 생깁니다.
26. 단점: 순서를 잘 지켜야 하며, 바이러스와 오류에 주의해야 합니다.
27. DVCS(분산 버전 관리 시스템): Git이 등장했습니다.
